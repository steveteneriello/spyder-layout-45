import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

export type ThemeMode = 'light' | 'dark' | 'auto';

interface ThemeColors {
  [key: string]: {
    light: string;
    dark: string;
  };
}

interface GlobalThemeContextType {
  themeMode: ThemeMode;
  actualTheme: 'light' | 'dark';
  setThemeMode: (mode: ThemeMode) => void;
  isSystemDark: boolean;
  colors: ThemeColors;
  updateColors: (newColors: ThemeColors) => void;
  resetColors: () => void;
  // Debug settings
  debugSettings: DebugSettings;
  updateDebugSettings: (updates: Partial<DebugSettings>) => void;
  // Brand settings
  brandSettings: BrandSettings;
  updateBrandSettings: (updates: Partial<BrandSettings>) => void;
  // Save all settings
  saveAllSettings: () => void;
  hasUnsavedChanges: boolean;
}

interface DebugSettings {
  showThemeDebug: boolean;
  showColorPreview: boolean;
  showThemeInfo: boolean;
}

interface BrandSettings {
  useLogo: boolean;
  brandText: string;
  tagline: string;
  lightModeLogo: string | null;
  darkModeLogo: string | null;
  logoSize: 'sm' | 'md' | 'lg';
  showTagline: boolean;
  logoPosition: 'left' | 'center';
}

// COMPLETE THEME SYSTEM - Aligned with Implementation Guide
const defaultColors: ThemeColors = {
  // === BACKGROUNDS ===
  'bg-primary': { 
    light: '255 255 255',      // #FFFFFF - Main app background
    dark: '14 17 23'           // #0E1117 - Main app background
  },
  'bg-secondary': { 
    light: '251 252 253',      // #FBFCFD - Cards, sidebar, panels  
    dark: '22 27 34'           // #161B22 - Cards, sidebar, panels
  },
  'bg-tertiary': { 
    light: '248 249 250',      // #F8F9FA - Elevated elements, modals
    dark: '33 38 45'           // #21262D - Elevated elements, modals
  },
  'bg-hover': { 
    light: '241 243 245',      // #F1F3F5 - Interactive hover states
    dark: '48 54 61'           // #30363D - Interactive hover states
  },
  'bg-active': { 
    light: '233 236 239',      // #E9ECEF - Active/pressed states
    dark: '55 62 71'           // #373E47 - Active/pressed states
  },
  'bg-selected': { 
    light: '227 242 253',      // #E3F2FD - Selected items background
    dark: '28 33 40'           // #1C2128 - Selected items background
  },

  // === TEXT & ICONS ===
  'text-primary': { 
    light: '26 32 44',         // #1A202C - Main text, primary icons
    dark: '240 246 252'        // #F0F6FC - Main text, primary icons
  },
  'text-secondary': { 
    light: '74 85 104',        // #4A5568 - Muted text, secondary icons
    dark: '125 133 144'        // #7D8590 - Muted text, secondary icons
  },
  'text-tertiary': { 
    light: '113 128 150',      // #718096 - Disabled text, placeholder
    dark: '101 109 118'        // #656D76 - Disabled text, placeholder
  },
  'text-inverse': { 
    light: '255 255 255',      // #FFFFFF - Text on dark backgrounds
    dark: '14 17 23'           // #0E1117 - Text on light backgrounds
  },

  // === BRAND & ACCENTS ===
  'accent-primary': { 
    light: '49 130 206',       // #3182CE - Primary blue, links
    dark: '56 139 253'         // #388BFD - Primary blue, links
  },
  'accent-primary-hover': { 
    light: '44 82 130',        // #2C5282 - Primary blue hover
    dark: '31 111 235'         // #1F6FEB - Primary blue hover
  },
  'accent-primary-active': { 
    light: '42 67 101',        // #2A4365 - Primary blue active
    dark: '26 84 144'          // #1A5490 - Primary blue active
  },

  // === STATUS COLORS ===
  'success': { 
    light: '56 161 105',       // #38A169 - Success states
    dark: '63 185 80'          // #3FB950 - Success states
  },
  'success-bg': { 
    light: '240 255 244',      // #F0FFF4 - Success background
    dark: '13 17 23'           // #0D1117 - Success background
  },
  'success-border': { 
    light: '34 84 61',         // #22543D - Success borders
    dark: '46 160 67'          // #2EA043 - Success borders
  },
  
  'warning': { 
    light: '221 107 32',       // #DD6B20 - Warning states
    dark: '210 153 34'         // #D29922 - Warning states
  },
  'warning-bg': { 
    light: '255 250 240',      // #FFFAF0 - Warning background
    dark: '28 22 17'           // #1C1611 - Warning background
  },
  'warning-border': { 
    light: '192 86 33',        // #C05621 - Warning borders
    dark: '184 134 11'         // #B8860B - Warning borders
  },
  
  'error': { 
    light: '229 62 62',        // #E53E3E - Error states
    dark: '248 81 73'          // #F85149 - Error states
  },
  'error-bg': { 
    light: '255 245 245',      // #FFF5F5 - Error background
    dark: '28 17 22'           // #1C1116 - Error background
  },
  'error-border': { 
    light: '197 48 48',        // #C53030 - Error borders
    dark: '229 83 75'          // #E5534B - Error borders
  },

  // === BORDERS & DIVIDERS ===
  'border-primary': { 
    light: '226 232 240',      // #E2E8F0 - Main borders
    dark: '48 54 61'           // #30363D - Main borders
  },
  'border-secondary': { 
    light: '241 243 245',      // #F1F3F5 - Subtle borders
    dark: '33 38 45'           // #21262D - Subtle borders
  },
  'border-focus': { 
    light: '49 130 206',       // #3182CE - Focus ring color
    dark: '56 139 253'         // #388BFD - Focus ring color
  },

  // === SHADOWS ===
  'shadow-sm': { 
    light: '0 0 0',            // Placeholder for shadow (handled separately)
    dark: '0 0 0' 
  },
  'shadow-md': { 
    light: '0 0 0', 
    dark: '0 0 0' 
  },
  'shadow-lg': { 
    light: '0 0 0', 
    dark: '0 0 0' 
  },
  'shadow-focus': { 
    light: '0 0 0', 
    dark: '0 0 0' 
  },

  // === SHADCN/UI COMPATIBILITY ===
  'background': { 
    light: '255 255 255',      // Background
    dark: '14 17 23' 
  },
  'foreground': { 
    light: '26 32 44',         // Foreground text
    dark: '240 246 252' 
  },
  'card': { 
    light: '251 252 253',      // Card background
    dark: '22 27 34' 
  },
  'card-foreground': { 
    light: '26 32 44',         // Card text
    dark: '240 246 252' 
  },
  'primary': { 
    light: '49 130 206',       // Primary color
    dark: '56 139 253' 
  },
  'primary-foreground': { 
    light: '255 255 255',      // Primary text
    dark: '14 17 23' 
  },
  'secondary': { 
    light: '248 249 250',      // Secondary background
    dark: '33 38 45' 
  },
  'secondary-foreground': { 
    light: '26 32 44',         // Secondary text
    dark: '240 246 252' 
  },
  'muted': { 
    light: '241 243 245',      // Muted background
    dark: '48 54 61' 
  },
  'muted-foreground': { 
    light: '113 128 150',      // Muted text
    dark: '125 133 144' 
  },
  'accent': { 
    light: '241 243 245',      // Accent background
    dark: '48 54 61' 
  },
  'accent-foreground': { 
    light: '26 32 44',         // Accent text
    dark: '240 246 252' 
  },
  'border': { 
    light: '226 232 240',      // Border color
    dark: '48 54 61' 
  },
  'input': { 
    light: '226 232 240',      // Input border
    dark: '48 54 61' 
  },
  'ring': { 
    light: '49 130 206',       // Focus ring
    dark: '56 139 253' 
  },
  'destructive': { 
    light: '229 62 62',        // Destructive actions
    dark: '248 81 73' 
  },
  'destructive-foreground': { 
    light: '255 255 255',      // Destructive text
    dark: '14 17 23' 
  }
};

const GlobalThemeContext = createContext<GlobalThemeContextType | undefined>(undefined);

interface GlobalThemeProviderProps {
  children: ReactNode;
}

export function GlobalThemeProvider({ children }: GlobalThemeProviderProps) {
  const [themeMode, setThemeModeState] = useState<ThemeMode>('auto');
  const [isSystemDark, setIsSystemDark] = useState(false);
  const [colors, setColors] = useState<ThemeColors>(defaultColors);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  const [debugSettings, setDebugSettings] = useState<DebugSettings>({
    showThemeDebug: false,
    showColorPreview: true,
    showThemeInfo: true
  });

  const [brandSettings, setBrandSettings] = useState<BrandSettings>({
    useLogo: false,
    brandText: 'Oxylabs Dashboard',
    tagline: 'Data Collection Platform',
    lightModeLogo: null,
    darkModeLogo: null,
    logoSize: 'md',
    showTagline: true,
    logoPosition: 'left'
  });

  // Detect system theme
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    setIsSystemDark(mediaQuery.matches);

    const handleChange = (e: MediaQueryListEvent) => {
      setIsSystemDark(e.matches);
    };

    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);

  // Load theme from localStorage
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme-mode') as ThemeMode;
    if (savedTheme && ['light', 'dark', 'auto'].includes(savedTheme)) {
      setThemeModeState(savedTheme);
    }

    const savedColors = localStorage.getItem('theme-colors');
    if (savedColors) {
      try {
        const parsedColors = JSON.parse(savedColors);
        setColors({ ...defaultColors, ...parsedColors });
      } catch (error) {
        console.warn('Failed to parse saved colors, using defaults');
      }
    }

    // Load debug settings
    const savedDebugSettings = localStorage.getItem('theme-debug-settings');
    if (savedDebugSettings) {
      try {
        setDebugSettings(JSON.parse(savedDebugSettings));
      } catch (error) {
        console.warn('Failed to parse debug settings, using defaults');
      }
    }

    // Load brand settings
    const savedBrandSettings = localStorage.getItem('brand-settings');
    if (savedBrandSettings) {
      try {
        setBrandSettings(JSON.parse(savedBrandSettings));
      } catch (error) {
        console.warn('Failed to parse brand settings, using defaults');
      }
    }
  }, []);

  // Calculate actual theme
  const actualTheme: 'light' | 'dark' = themeMode === 'auto' 
    ? (isSystemDark ? 'dark' : 'light') 
    : themeMode as 'light' | 'dark';

  // Set theme mode with persistence
  const setThemeMode = (mode: ThemeMode) => {
    console.log('🔄 Setting theme mode:', mode);
    setThemeModeState(mode);
    localStorage.setItem('theme-mode', mode);
  };

  // Update colors with persistence
  const updateColors = (newColors: ThemeColors) => {
    console.log('🎨 Updating colors:', newColors);
    setColors(newColors);
    localStorage.setItem('theme-colors', JSON.stringify(newColors));
  };

  // Reset colors to defaults
  const resetColors = () => {
    console.log('🔄 Resetting colors to defaults');
    setColors(defaultColors);
    localStorage.removeItem('theme-colors');
  };

  // Update debug settings
  const updateDebugSettings = (updates: Partial<DebugSettings>) => {
    const newSettings = { ...debugSettings, ...updates };
    setDebugSettings(newSettings);
    
    // Auto-save debug settings immediately
    localStorage.setItem('theme-debug-settings', JSON.stringify(newSettings));
    window.dispatchEvent(new CustomEvent('themeDebugSettingsChanged', { 
      detail: newSettings 
    }));
    
    setHasUnsavedChanges(true);
    console.log('🔧 Debug settings updated and saved:', newSettings);
  };

  // Update brand settings
  const updateBrandSettings = (updates: Partial<BrandSettings>) => {
    const newSettings = { ...brandSettings, ...updates };
    setBrandSettings(newSettings);
    
    // Auto-save brand settings immediately
    localStorage.setItem('brand-settings', JSON.stringify(newSettings));
    window.dispatchEvent(new CustomEvent('brandSettingsChanged', { 
      detail: newSettings 
    }));
    
    setHasUnsavedChanges(true);
    console.log('🎨 Brand settings updated and saved:', newSettings);
  };

  // Save all settings to localStorage
  const saveAllSettings = () => {
    console.log('💾 Saving all settings...');
    
    // Save colors (debug and brand settings are auto-saved)
    localStorage.setItem('theme-colors', JSON.stringify(colors));
    
    // Re-dispatch events to ensure all components are updated
    window.dispatchEvent(new CustomEvent('themeDebugSettingsChanged', { 
      detail: debugSettings 
    }));
    
    window.dispatchEvent(new CustomEvent('brandSettingsChanged', { 
      detail: brandSettings 
    }));
    
    setHasUnsavedChanges(false);
    console.log('✅ All settings saved successfully');
    console.log('🎨 Colors:', colors);
    console.log('🔧 Debug:', debugSettings);
    console.log('🏷️ Brand:', brandSettings);
  };

  // Apply theme to document
  useEffect(() => {
    console.log('🎯 APPLYING COMPLETE THEME SYSTEM - Implementation Guide Aligned');
    console.log('Mode:', themeMode, '| Actual:', actualTheme);
    console.log('✅ Primary blue:', colors.primary[actualTheme]);
    console.log('✅ Background:', colors.background[actualTheme]);

    // Remove existing theme
    document.documentElement.className = '';
    const existing = document.getElementById('complete-theme-system');
    if (existing) existing.remove();
    
    // Set theme class and attribute for early detection
    if (actualTheme === 'dark') {
      document.documentElement.classList.add('dark');
    }
    document.documentElement.setAttribute('data-theme', actualTheme);
    
    // Update meta theme-color for mobile browsers
    const metaThemeColor = document.querySelector('meta[name="theme-color"]');
    if (metaThemeColor) {
      metaThemeColor.setAttribute('content', 
        actualTheme === 'dark' ? '#0E1117' : '#FFFFFF'
      );
    }

    // Create complete theme CSS with shadows and transitions
    const style = document.createElement('style');
    style.id = 'complete-theme-system';

    // RGB variables (primary system)
    const rgbVars = Object.entries(colors).map(([key, values]) => {
      const colorValue = values[actualTheme];
      return `  --${key}: ${colorValue};`;
    }).join('\n');

    // Shadow definitions based on theme
    const shadowVars = actualTheme === 'dark' ? `
  --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.3);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.4);
  --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.5);
  --shadow-focus: 0 0 0 3px rgba(56, 139, 253, 0.3);` : `
  --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.07);
  --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
  --shadow-focus: 0 0 0 3px rgba(49, 130, 206, 0.1);`;

    // Convert RGB to HSL for shadcn compatibility
    const rgbToHsl = (rgb: string): string => {
      if (!rgb || !rgb.includes(' ')) return '0 0% 100%';
      
      const parts = rgb.split(' ').map(p => parseInt(p) / 255);
      if (parts.length !== 3 || parts.some(isNaN)) return '0 0% 100%';
      
      const [r, g, b] = parts;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let h = 0, s = 0, l = (max + min) / 2;

      if (max !== min) {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r: h = (g - b) / d + (g < b ? 6 : 0); break;
          case g: h = (b - r) / d + 2; break;
          case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
      }

      return `${Math.round(h * 360)} ${Math.round(s * 100)}% ${Math.round(l * 100)}%`;
    };

    // Core HSL variables for shadcn compatibility
    const hslVars = [
      `--background: ${rgbToHsl(colors.background[actualTheme])}`,
      `--foreground: ${rgbToHsl(colors.foreground[actualTheme])}`,
      `--card: ${rgbToHsl(colors.card[actualTheme])}`,
      `--card-foreground: ${rgbToHsl(colors['card-foreground'][actualTheme])}`,
      `--primary: ${rgbToHsl(colors.primary[actualTheme])}`,
      `--primary-foreground: ${rgbToHsl(colors['primary-foreground'][actualTheme])}`,
      `--secondary: ${rgbToHsl(colors.secondary[actualTheme])}`,
      `--secondary-foreground: ${rgbToHsl(colors['secondary-foreground'][actualTheme])}`,
      `--muted: ${rgbToHsl(colors.muted[actualTheme])}`,
      `--muted-foreground: ${rgbToHsl(colors['muted-foreground'][actualTheme])}`,
      `--accent: ${rgbToHsl(colors.accent[actualTheme])}`,
      `--accent-foreground: ${rgbToHsl(colors['accent-foreground'][actualTheme])}`,
      `--border: ${rgbToHsl(colors.border[actualTheme])}`,
      `--input: ${rgbToHsl(colors.input[actualTheme])}`,
      `--ring: ${rgbToHsl(colors.ring[actualTheme])}`,
      `--destructive: ${rgbToHsl(colors.destructive?.[actualTheme] || colors.error[actualTheme])}`,
      `--destructive-foreground: ${rgbToHsl(colors['destructive-foreground']?.[actualTheme] || colors['text-inverse'][actualTheme])}`
    ].join(';\n  ');

    // Base component styles with proper interactions
    const componentStyles = `
/* === COMPONENT STATE STYLES === */

/* Navigation Components */
.nav-item {
  display: flex;
  align-items: center;
  padding: 12px 16px;
  color: rgb(var(--text-secondary));
  background: transparent;
  border-radius: 8px;
  transition: all 0.2s ease;
  cursor: pointer;
}

.nav-item:hover {
  background: rgb(var(--bg-hover));
  color: rgb(var(--text-primary));
}

.nav-item.active,
.nav-item[aria-current="page"] {
  background: rgb(var(--bg-selected));
  color: rgb(var(--accent-primary));
  border-left: 3px solid rgb(var(--accent-primary));
}

.nav-item:focus {
  outline: none;
  box-shadow: var(--shadow-focus);
}

.nav-item:disabled {
  color: rgb(var(--text-tertiary));
  cursor: not-allowed;
  opacity: 0.6;
}

/* Button Components */
.btn-primary {
  background: rgb(var(--accent-primary));
  color: rgb(var(--text-inverse));
  border: 1px solid rgb(var(--accent-primary));
  padding: 12px 24px;
  border-radius: 8px;
  font-weight: 500;
  transition: all 0.2s ease;
}

.btn-primary:hover {
  background: rgb(var(--accent-primary-hover));
  border-color: rgb(var(--accent-primary-hover));
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

.btn-primary:active {
  background: rgb(var(--accent-primary-active));
  transform: translateY(0);
  box-shadow: var(--shadow-sm);
}

.btn-primary:focus {
  box-shadow: var(--shadow-focus);
}

/* Card Components */
.card-interactive {
  transition: all 0.2s ease;
}

.card-interactive:hover {
  border-color: rgb(var(--border-primary));
  box-shadow: var(--shadow-md);
  transform: translateY(-2px);
}

.card-interactive.selected {
  border-color: rgb(var(--accent-primary));
  box-shadow: var(--shadow-focus);
}

/* Input Components */
.input-enhanced {
  background: rgb(var(--bg-primary));
  color: rgb(var(--text-primary));
  border: 1px solid rgb(var(--border-primary));
  padding: 12px 16px;
  border-radius: 8px;
  transition: all 0.2s ease;
}

.input-enhanced:hover {
  border-color: rgb(var(--accent-primary));
}

.input-enhanced:focus {
  outline: none;
  border-color: rgb(var(--accent-primary));
  box-shadow: var(--shadow-focus);
}

.input-enhanced:disabled {
  background: rgb(var(--bg-tertiary));
  color: rgb(var(--text-tertiary));
  cursor: not-allowed;
}

.input-enhanced.error {
  border-color: rgb(var(--error));
  box-shadow: 0 0 0 3px rgba(248, 81, 73, 0.1);
}

.input-enhanced::placeholder {
  color: rgb(var(--text-tertiary));
}

/* Alert Components */
.alert-success {
  background: rgb(var(--success-bg));
  color: rgb(var(--success));
  border: 1px solid rgb(var(--success-border));
  padding: 16px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.alert-warning {
  background: rgb(var(--warning-bg));
  color: rgb(var(--warning));
  border: 1px solid rgb(var(--warning-border));
  padding: 16px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.alert-error {
  background: rgb(var(--error-bg));
  color: rgb(var(--error));
  border: 1px solid rgb(var(--error-border));
  padding: 16px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 12px;
}`;

    style.textContent = `
:root[data-theme="${actualTheme}"] {
  /* === RGB COLOR VARIABLES === */
${rgbVars}
${shadowVars}
  
  /* === HSL VARIABLES (Shadcn/UI Compatibility) === */
  ${hslVars};
}

${componentStyles}`;

    document.head.appendChild(style);
    
    console.log('✅ Complete theme system applied with component styles');
  }, [actualTheme, colors]);
      `--accent-foreground: ${rgbToHsl(colors['accent-foreground'][actualTheme])}`,
      `--border: ${rgbToHsl(colors.border[actualTheme])}`,
      `--input: ${rgbToHsl(colors.input[actualTheme])}`,
      `--ring: ${rgbToHsl(colors.ring[actualTheme])}`,
    ].join(';\n  ') + ';';

    // Complete CSS with both RGB and HSL support
    style.textContent = `
      /* CORRECTED THEME SYSTEM - Blue stays blue, white stays white */
      :root {
        /* RGB Variables (primary system) */
${rgbVars}
        
        /* HSL Variables (shadcn compatibility) */
        ${hslVars}
      }

      /* Force correct body styling */
      body {
        background-color: rgb(${colors.background[actualTheme]}) !important;
        color: rgb(${colors.foreground[actualTheme]}) !important;
        transition: background-color 0.3s ease, color 0.3s ease !important;
      }

      /* Essential utility class overrides */
      .bg-background { background-color: rgb(${colors.background[actualTheme]}) !important; }
      .bg-card { background-color: rgb(${colors.card[actualTheme]}) !important; }
      .bg-primary { background-color: rgb(${colors.primary[actualTheme]}) !important; }
      .bg-secondary { background-color: rgb(${colors.secondary[actualTheme]}) !important; }
      .bg-muted { background-color: rgb(${colors.muted[actualTheme]}) !important; }
      .bg-accent { background-color: rgb(${colors.accent[actualTheme]}) !important; }
      
      .text-foreground { color: rgb(${colors.foreground[actualTheme]}) !important; }
      .text-card-foreground { color: rgb(${colors['card-foreground'][actualTheme]}) !important; }
      .text-primary { color: rgb(${colors.primary[actualTheme]}) !important; }
      .text-primary-foreground { color: rgb(${colors['primary-foreground'][actualTheme]}) !important; }
      .text-secondary-foreground { color: rgb(${colors['secondary-foreground'][actualTheme]}) !important; }
      .text-muted-foreground { color: rgb(${colors['muted-foreground'][actualTheme]}) !important; }
      .text-accent-foreground { color: rgb(${colors['accent-foreground'][actualTheme]}) !important; }
      
      .border-border { border-color: rgb(${colors.border[actualTheme]}) !important; }
      .border-input { border-color: rgb(${colors.input[actualTheme]}) !important; }

      /* Ensure theme transitions */
      * {
        transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
      }
    `;

    document.head.appendChild(style);
    console.log('✅ Corrected theme system applied successfully');

  }, [colors, actualTheme, themeMode]);

  const value: GlobalThemeContextType = {
    themeMode,
    actualTheme,
    setThemeMode,
    isSystemDark,
    colors,
    updateColors,
    resetColors,
    debugSettings,
    updateDebugSettings,
    brandSettings,
    updateBrandSettings,
    saveAllSettings,
    hasUnsavedChanges,
  };

  return (
    <GlobalThemeContext.Provider value={value}>
      {children}
    </GlobalThemeContext.Provider>
  );
}

export function useGlobalTheme(): GlobalThemeContextType {
  const context = useContext(GlobalThemeContext);
  if (!context) {
    throw new Error('useGlobalTheme must be used within a GlobalThemeProvider');
  }
  return context;
}